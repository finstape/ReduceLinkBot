import os
import re
import logging
import requests
import validators

from aiogram import Bot, Dispatcher, types

logging.basicConfig(level=logging.INFO)
bot = None

another_content = ['animation', 'audio', 'document', 'photo', 'sticker', 'video', 'video_note', 'voice', 'location',
				 'contact', 'new_chat_members', 'left_chat_member', 'new_chat_title', 'new_chat_photo', 'delete_chat_photo',
                 'group_chat_created', 'supergroup_chat_created', 'channel_chat_created', 'migrate_to_chat_id',
                 'migrate_from_chat_id', 'pinned_message']

# handlers
async def process_command_start(message: types.Message):

	message_text = ('üî•<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Reduce Link Bot!</b>üî•\n\n'
					'–ó–¥–µ—Å—å –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ª—é–±—É—é —Å—Å—ã–ª–∫—É\n'
					'–í—Å—ë –ø—Ä–æ—Å—Ç–æ: –≤—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π URL\n\n'
					'–≠—Ç–æ –Ω–µ –≤—Å–µ! –ë–æ—Ç —Ç–∞–∫–∂–µ —É–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏\n'
					'–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É, –∏ –æ–Ω –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')

	await message.answer(message_text)

async def process_link_creation(message: types.Message):

	pattern_URL = 'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
	URLS = [url for url in re.findall(pattern_URL, message.text) if url.rstrip()]

	for text in URLS:

		if validators.url(text):

			URL = requests.get("https://clck.ru/--?url=" + text)

			if text != URL.text:
				await message.answer(f'{text} ===> {URL.text}', disable_web_page_preview=True)
			else:

				try:
					URL = requests.get(URL.text)
					link_list = ''
					el = ''
					for num, elem in enumerate(URL.history, 1):
						link_list += str(num) + '. ' + elem.url + '\n'
						el = elem.url
					link_list = f'{text} ===> {el}\n\n' + link_list	
					await message.answer(link_list, disable_web_page_preview=True)
				except:
					await message.answer(f'{text} ===> –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')	
		else:
			await message.answer(f'{text} ===> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –ø—Ä–æ—Ç–æ–∫–æ–ª HTTPS(HTTP)')
	
async def send_erray_message(message: types.Message):

	await message.answer('–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤—É—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')

# Selectel Lambda funcs
async def register_handlers(dp: Dispatcher):

	dp.register_message_handler(process_command_start, commands=['start'])
	dp.register_message_handler(send_erray_message, content_types=another_content)
	dp.register_message_handler(process_link_creation)

async def process_event(update, dp: Dispatcher):

	Bot.set_current(dp.bot)
	await dp.process_update(update)

# Selectel serverless entry point
async def main(**kwargs):

	global bot
	bot = Bot(os.environ.get("TOKEN"), parse_mode=types.ParseMode.HTML)
	dp = Dispatcher(bot)

	await register_handlers(dp)

	update = types.Update.to_object(kwargs)
	await process_event(update, dp)

	return 'ok'